# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lK7xVR4lZiWYY80HiW9tVTujLdZrnlSn
"""

import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

class CreationalPatternName:
    def __init__(self, X_train, y_train):
        self.X_train = X_train
        self.y_train = y_train

    def get_subsample(self, df_share):
        #<YOUR CODE HERE>
        X_train, X_test, y_train, y_test = train_test_split(self.X_train, self.y_train, train_size = df_share / 100)
        
        return X_train, y_train


        """
        1. Copy train dataset
        2. Shuffle data (don't miss the connection between X_train and y_train)
        3. Return df_share %-subsample of X_train and y_train
        """

if __name__ == "__main__":
    #<YOUR CODE HERE>
    iris = load_iris()
    X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, train_size=0.7)
    
    """
    1. Load iris dataset
    2. Shuffle data and divide into train / test.
    """

    pattern_item = CreationalPatternName(X_train, y_train)
    for df_share in range(10, 101, 10):
        curr_X_train, curr_y_train = pattern_item.get_subsample(df_share)
        #<YOUR CODE HERE>

        #scaler = StandardScaler()
        #scaler.fit(curr_X_train)
        #curr_X_train_scaled = scaler.transform(curr_X_train)
        #X_test_scaled = scaler.transform(X_test)

        model = LogisticRegression()
        #model.fit(curr_X_train_scaled, curr_y_train)
        model.fit(curr_X_train, curr_y_train)

        predict = model.predict(X_test)

        print("Accuracy: {}".format(accuracy_score(y_test, predict)))


        """
        1. Preprocess curr_X_train, curr_y_train in the way you want
        2. Train Linear Regression on the subsample
        3. Save or print the score to check how df_share affects the quality
        """

